volumes:
    # Путь к БД redis
    redis:
    # Nodejs
    nodejs:

services:
    nginx:
        image: nginx:alpine
        container_name: nginx
        profiles: [ main ]
        volumes:
            - ${CONF_NGINX}:/etc/nginx/nginx.conf
            - ${CONF_HOSTS}:/etc/nginx/conf.d:ro
            - ${DATA_HOSTS}:/var/www
            - ${CERTBOT_WEB}:/var/www/certbot/:ro
            - ${CERTBOT_SSL}:/etc/nginx/ssl/:ro
        entrypoint: /bin/sh
        command: -c 'while :; do sleep 6h && wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'
        ports:
            - "80:80"
            - "443:443"
            # WS HTTP/S INFO PORT
            - "8085:8085"
            - "8485:8485"
            # WS PORT
            - "8033:8033"
            # WSS PORT
            - "8433:8433"
        networks:
            - net
        restart: unless-stopped
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "nginx"

    #https://mindsers.blog/en/post/https-using-nginx-certbot-docker/
    certbot:
        image: certbot/certbot:latest
        container_name: certbot
        profiles: [ prod ]
        # Unable to create new certs, doesn't work - $ make certbot.create
        #entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
        #user: ${UID:-1000}:${GID:-1000}
        volumes:
            - ${CERTBOT_WEB}:/var/www/certbot/:rw
            - ${CERTBOT_SSL}:/etc/letsencrypt/:rw
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "certbot"

    fpm:
        build:
            context: .
            dockerfile: ./images/php-fpm/Dockerfile
            args:
                # build context only
                php_version: ${PHP_VERSION:-8.2}
                allow_xdebug: ${ALLOW_XDEBUG:-1}
        container_name: php-fpm
        profiles: [ main ]
        environment:
            # service container environment
            - PHP_VERSION=${PHP_VERSION:-8.2}
            - XDEBUG_PORT=${XDEBUG_PORT:-9001}
        volumes:
            - ${DATA_HOSTS}:/var/www
            - ${DATA_XDEBUG}:/tmp/xdebug
        networks:
            - net
        restart: unless-stopped
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "fpm"

    crontab:
        build:
            context: .
            dockerfile: ./images/php-cron/Dockerfile
            args:
                - php_version=${PHP_VERSION:-8.2}
                - allow_xdebug=${ALLOW_XDEBUG:-1}
        container_name: php-cron
        profiles: [ main ]
        environment:
            PHP_VERSION: ${PHP_VERSION:-8.2}
            XDEBUG_PORT: ${XDEBUG_PORT:-9001}
        volumes:
            - ${DATA_HOSTS}:/var/www
            - ${DATA_XDEBUG}:/tmp/xdebug
            - ${CONF_CRON}:/hosts_crontab
        networks:
            - net
        restart: unless-stopped
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "crontab"

    workers:
        build:
            context: .
            dockerfile: ./images/php-worker/Dockerfile
            args:
                - php_version=${PHP_VERSION:-8.2}
                - user=${UID:-1}
        container_name: php-worker
        profiles: [ main ]
        environment:
            PHP_VERSION: ${PHP_VERSION:-8.2}
            XDEBUG_PORT: ${XDEBUG_PORT:-9001}
            USER: ${UID:-0}
        volumes:
            - /etc/passwd:/etc/passwd
            - /etc/group:/etc/group
            - ${DATA_HOSTS}:/var/www
            - ${CONF_WORKER}:/etc/supervisor/conf.d/
        command: [ '/usr/bin/supervisord', '-c', '/etc/supervisor/supervisord.conf' ]
        #        depends_on:
        #            db:
        #                condition: service_healthy
        networks:
            - net
        restart: unless-stopped
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "workers"

    db:
        image: percona:ps-8
        container_name: db
        profiles: [ database ]
        volumes:
            - ${DATA_MYSQL}:/var/lib/mysql
            - ${CONF_MYSQL}:/etc/my.cnf.d:ro
        ports:
            - "${DB_PORT_MAP:-65001:65001}"
        networks:
            net:
                ipv4_address: 192.168.17.33
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        healthcheck:
            test: [ "CMD", "mysqladmin", "-uroot", "-p$MYSQL_ROOT_PASSWORD",  "ping", "-h", "localhost" ]
        restart: unless-stopped
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "{{.ImageName}}"

    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        container_name: phpmyadmin
        profiles: [ debug ]
        ports:
            - "${PMA_PORT_MAP:-8081:80}"
        networks:
            - net
        environment:
            MYSQL_USERNAME: root
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            UPLOAD_LIMIT: ${UPLOAD_LIMIT}
            PMA_HOST: ${PMA_HOST}
        restart: unless-stopped

    buggregator:
        image: ghcr.io/buggregator/server:latest
        container_name: buggregator
        profiles:
            - debug
        ports:
            - 8000:8000
            - 1025:1025
            - 9912:9912
            - 9913:9913
        networks:
            - net
        environment:
            MYSQL_USERNAME: root
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            UPLOAD_LIMIT: ${UPLOAD_LIMIT}
            PMA_HOST: ${PMA_HOST}
        restart: unless-stopped
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "buggregator"

    memcached:
        image: memcached
        container_name: memcached
        profiles: [ main ]
        networks:
            - net
        restart: unless-stopped
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "{{.ImageName}}"

    redis:
        image: redis
        container_name: redis
        profiles: [ main ]
        user: ${UID:-1000}:${GID:-1000}
        volumes:
            - ${DATA_REDIS}:/tmp/redis
            - ${CONF_REDIS}:/usr/local/etc/redis/redis.conf
        command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
        networks:
            - net
        restart: unless-stopped
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "{{.ImageName}}"

    rabbitmq:
        image: rabbitmq:management
        container_name: rabbitmq
        profiles: [ main ]
        hostname: rabbitmq
        environment:
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
            - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit log_levels [{connection,error},{default,info}] disk_free_limit ${RABBITMQ_LIMIT}
        volumes:
            - ${DATA_RABBITMQ}:/var/lib/rabbitmq
        ports:
            - 15672:15672
        networks:
            - net
        restart: unless-stopped
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "rabbitmq"

    nodejs:
        build:
            context: ./images/nodejs
        container_name: nodejs
        profiles: [ frontend ]
        user: ${UID:-1000}:${GID:-1000}
        environment:
            - WS_PORT=${WS_PORT:-1333}
            - WS_HTTP_PORT=${WS_HTTP_PORT:-8085}
            - REDIS_HOST=redis
            - REDIS_PORT=6379
            - REDIS_CHANNEL=datatube
        volumes:
            - ${WS_DATA:-/tmp}:${WS_PATH:-/tmp/empty:ro}
        networks:
            - net
        restart: unless-stopped
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "nodejs"

    logger:
        image: lscr.io/linuxserver/syslog-ng:latest
        container_name: logger
        profiles: [ main ]
        environment:
            - PUID=${UID:-1000}
            - PGID=${GID:-1000}
            - TZ=${DEFAULT_TIME_ZONE}
        volumes:
            - ${CONF_LOG}:/config/syslog-ng.conf
            - ${DATA_LOG}:/var/log #optional
        ports:
            - 514:5514/udp
            - 601:6601/tcp
            - 6514:6514/tcp
        networks:
            - net
        restart: unless-stopped

    logrotate:
        image: blacklabelops/logrotate
        container_name: logrotate
        profiles: [ main ]
        user: ${LOG_ROTATE_USER:-1000}:${LOG_ROTATE_GROUP:-1000}
        environment:
            - LOGS_DIRECTORIES=/var/log/docker
            - LOGROTATE_INTERVAL=hourly
            - LOGROTATE_CRONSCHEDULE=0 */20 * * * *
            - LOGROTATE_COPIES=${LOGROTATE_COPIES:-5}
            - LOGROTATE_SIZE=${LOGROTATE_SIZE:-10M}
            - LOGROTATE_COMPRESSION=compress
            - LOGROTATE_LOGFILE=/var/log/docker/logrotatecron.log
            - LOGROTATE_STATUSFILE=/var/log/docker/logrotate.status
        volumes:
            - ${DATA_LOG}:/var/log/docker
        networks:
            - net
        restart: unless-stopped
        logging:
            driver: "syslog"
            options:
                syslog-address: "udp://127.0.0.1:514"
                syslog-facility: "daemon"
                tag: "logrotate"

networks:
    net:
        #name: dockerNet
        driver: bridge
        ipam:
            driver: default
            config:
                -   subnet: 192.168.17.0/24
